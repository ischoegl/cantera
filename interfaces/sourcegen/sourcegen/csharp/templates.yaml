# Definitions used for Jinja template replacement.

# This file is part of Cantera. See License.txt in the top-level directory or
# at https://cantera.org/license.txt for license and copyright information.

csharp-interop-func: |-
  {{ func_prolog }} {{ 'unsafe ' if unsafe }}{{ declaration }};

csharp-base-handle: |-
  class {{ class_name }} : CanteraHandle
  {
      protected override bool ReleaseHandle() =>
          LibCantera.{{ release_func_name }}(Value) == InteropConsts.Success;
  }

csharp-derived-handle: |-
  class {{ derived_class_name }} : {{ base_class_name }} { }"""

csharp-property-int-double: |-
  public {{ prop_type }} {{ cs_name }}
  {
      get => InteropUtil.CheckReturn(
          LibCantera.{{ getter }}(_handle));
      {% if setter -%}
      set => InteropUtil.CheckReturn(
          LibCantera.{{ setter }}(_handle, value));
      {% endif -%}
  }

csharp-property-string: |-
  public unsafe string {{ cs_name }}
  {
      get => InteropUtil.GetString(40, (length, buffer) =>
          LibCantera.{{ getter }}(_handle, ({p_type}) length, buffer));
      {% if setter -%}
      set => InteropUtil.CheckReturn(
          LibCantera.{{ setter }}(_handle, value));
      {% endif -%}
  }

csharp-scaffold-interop: |-
  {{ preamble }}

  using System.Runtime.InteropServices;

  namespace Cantera.Interop;

  static partial class LibCantera
  {
      {% for function in cs_functions %}
      {{ function | indent(4) }}
      {% endfor %}
  }

csharp-scaffold-handles: |-
  {{ preamble }}

  namespace Cantera.Interop;

  {{ handles_text }}

csharp-scaffold-wrapper-class: |-
  {{ preamble }}

  using Cantera.Interop;

  namespace Cantera;

  public partial class {{ wrapper_class_name }} : IDisposable
  {
      readonly {{ handle_class_name }} _handle;

      #pragma warning disable CS1591

      {{ properties_text }}

      #pragma warning restore CS1591

      /// <summary>
      /// Frees the underlying resources used by the
      /// native Cantera library for this instance.
      /// </summary>
      public void Dispose() =>
          _handle.Dispose();
  }
